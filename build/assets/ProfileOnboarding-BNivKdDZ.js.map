{"version":3,"file":"ProfileOnboarding-BNivKdDZ.js","sources":["../../src/components/ProfileOnboarding.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Textarea } from './ui/textarea';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { Progress } from './ui/progress';\nimport { Badge } from './ui/badge';\nimport { Label } from './ui/label';\nimport { toast } from 'sonner';\nimport { useI18n } from '../utils/i18n';\nimport { \n  User, \n  Briefcase, \n  MapPin, \n  Star, \n  CheckCircle,\n  ArrowRight,\n  ArrowLeft,\n  Sparkles,\n  GraduationCap,\n  Plus,\n  X,\n  Calendar,\n  Award,\n  DollarSign\n} from 'lucide-react';\nimport { userApi, JobExperience, StudyExperience, Certification, Service } from '../utils/api';\nimport { useUser } from '../App'; // Import useUser to update context\n\ninterface ProfileOnboardingProps {\n  userId: string;\n  userName: string;\n  userEmail: string;\n  onComplete: () => void;\n  onSkip: () => void;\n}\n\ninterface OnboardingData {\n  bio: string;\n  location: string;\n  skills: string[];\n  currentSkill: string;\n  jobExperiences: JobExperience[];\n  currentJobExperience: Omit<JobExperience, 'id'>;\n  studyExperiences: StudyExperience[];\n  currentStudyExperience: Omit<StudyExperience, 'id'>;\n  certifications: Certification[]; // New field\n  currentCertification: Omit<Certification, 'id'>; // New field\n  servicesOffered: Service[]; // New field\n  currentService: Omit<Service, 'id'>; // New field\n}\n\nexport function ProfileOnboarding({ userId, userName, userEmail, onComplete, onSkip }: ProfileOnboardingProps) {\n  const { t } = useI18n();\n  const { setUser } = useUser(); // Get setUser from context\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const [data, setData] = useState<OnboardingData>({\n    bio: '',\n    location: '',\n    skills: [],\n    currentSkill: '',\n    jobExperiences: [],\n    currentJobExperience: {\n      title: '',\n      company: '',\n      startDate: '',\n      endDate: null,\n      description: ''\n    },\n    studyExperiences: [],\n    currentStudyExperience: {\n      degree: '',\n      institution: '',\n      startDate: '',\n      endDate: null,\n      description: ''\n    },\n    certifications: [], // Initialize new field\n    currentCertification: { // Initialize new field\n      name: '',\n      issuer: '',\n      date: ''\n    },\n    servicesOffered: [], // Initialize new field\n    currentService: { // Initialize new field\n      name: '',\n      price: '',\n      rating: 0\n    }\n  });\n\n  const steps = [\n    {\n      id: 'welcome',\n      title: t('onboarding.welcomeTitle'),\n      description: t('onboarding.welcomeDescription'),\n      icon: Sparkles\n    },\n    {\n      id: 'bio',\n      title: t('onboarding.bioTitle'),\n      description: t('onboarding.bioDescription'),\n      icon: User\n    },\n    {\n      id: 'location',\n      title: t('onboarding.locationTitle'),\n      description: t('onboarding.locationDescription'),\n      icon: MapPin\n    },\n    {\n      id: 'skills',\n      title: t('onboarding.skillsTitle'),\n      description: t('onboarding.skillsDescription'),\n      icon: Star\n    },\n    {\n      id: 'jobExperience',\n      title: t('onboarding.jobExperienceTitle'),\n      description: t('onboarding.jobExperienceDescription'),\n      icon: Briefcase\n    },\n    {\n      id: 'studyExperience',\n      title: t('onboarding.studyExperienceTitle'),\n      description: t('onboarding.studyExperienceDescription'),\n      icon: GraduationCap\n    },\n    {\n      id: 'certifications', // New step\n      title: t('profile.certificationsTitle'),\n      description: t('profile.certificationsDescription'),\n      icon: Award\n    },\n    {\n      id: 'servicesOffered', // New step\n      title: t('profile.servicesOfferedTitle'),\n      description: t('profile.servicesOfferedDescription'),\n      icon: DollarSign\n    }\n  ];\n\n  const progress = ((currentStep + 1) / steps.length) * 100;\n\n  const handleAddSkill = () => {\n    if (data.currentSkill.trim() && data.skills.length < 10) {\n      setData({\n        ...data,\n        skills: [...data.skills, data.currentSkill.trim()],\n        currentSkill: ''\n      });\n    }\n  };\n\n  const handleRemoveSkill = (index: number) => {\n    setData({\n      ...data,\n      skills: data.skills.filter((_, i) => i !== index)\n    });\n  };\n\n  const handleAddJobExperience = () => {\n    const { title, company, startDate } = data.currentJobExperience;\n    if (title && company && startDate) {\n      setData(prev => ({\n        ...prev,\n        jobExperiences: [...prev.jobExperiences, { ...prev.currentJobExperience, id: Date.now().toString() }],\n        currentJobExperience: { title: '', company: '', startDate: '', endDate: null, description: '' }\n      }));\n    } else {\n      toast.error(t('onboarding.jobExperienceRequiredFields'));\n    }\n  };\n\n  const handleRemoveJobExperience = (id: string) => {\n    setData(prev => ({\n      ...prev,\n      jobExperiences: prev.jobExperiences.filter(exp => exp.id !== id)\n    }));\n  };\n\n  const handleAddStudyExperience = () => {\n    const { degree, institution, startDate } = data.currentStudyExperience;\n    if (degree && institution && startDate) {\n      setData(prev => ({\n        ...prev,\n        studyExperiences: [...prev.studyExperiences, { ...prev.currentStudyExperience, id: Date.now().toString() }],\n        currentStudyExperience: { degree: '', institution: '', startDate: '', endDate: null, description: '' }\n      }));\n    } else {\n      toast.error(t('onboarding.studyExperienceRequiredFields'));\n    }\n  };\n\n  const handleRemoveStudyExperience = (id: string) => {\n    setData(prev => ({\n      ...prev,\n      studyExperiences: prev.studyExperiences.filter(exp => exp.id !== id)\n    }));\n  };\n\n  const handleAddCertification = () => {\n    const { name, issuer, date } = data.currentCertification;\n    if (name && issuer && date) {\n      setData(prev => ({\n        ...prev,\n        certifications: [...prev.certifications, { ...prev.currentCertification, id: Date.now().toString() }],\n        currentCertification: { name: '', issuer: '', date: '' }\n      }));\n    } else {\n      toast.error(t('profile.certificationRequiredFields'));\n    }\n  };\n\n  const handleRemoveCertification = (id: string) => {\n    setData(prev => ({\n      ...prev,\n      certifications: prev.certifications.filter(cert => cert.id !== id)\n    }));\n  };\n\n  const handleAddService = () => {\n    const { name, price } = data.currentService;\n    if (name && price) {\n      setData(prev => ({\n        ...prev,\n        servicesOffered: [...prev.servicesOffered, { ...prev.currentService, id: Date.now().toString(), rating: 0 }]\n      }));\n      setData(prev => ({ ...prev, currentService: { name: '', price: '', rating: 0 } }));\n    } else {\n      toast.error(t('profile.serviceRequiredFields'));\n    }\n  };\n\n  const handleRemoveService = (id: string) => {\n    setData(prev => ({\n      ...prev,\n      servicesOffered: prev.servicesOffered.filter(service => service.id !== id)\n    }));\n  };\n\n  const handleNext = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    } else {\n      handleComplete();\n    }\n  };\n\n  const handleBack = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleComplete = async () => {\n    setIsLoading(true);\n    if (!userId) {\n      console.error('ProfileOnboarding.tsx: userId is missing, cannot complete onboarding.');\n      toast.error(t('onboarding.saveFailed') + ': User ID missing.');\n      setIsLoading(false);\n      return;\n    }\n    \n    const profileDataToSend = {\n      bio: data.bio,\n      location: data.location,\n      skills: data.skills,\n      jobExperiences: data.jobExperiences,\n      studyExperiences: data.studyExperiences,\n      certifications: data.certifications, // New field\n      servicesOffered: data.servicesOffered, // New field\n      onboardingCompleted: true,\n      profileCompleteness: calculateCompleteness()\n    };\n    \n    try {\n      const updatedProfileResponse = await userApi.updateProfile(userId, profileDataToSend);\n      \n      if (updatedProfileResponse.success) {\n        setUser(updatedProfileResponse.profile); // Update user context with the new profile\n        toast.success(t('onboarding.profileCompleted'));\n        onComplete();\n      } else {\n        toast.error(updatedProfileResponse.error || t('onboarding.saveFailed'));\n      }\n    } catch (error) {\n      console.error('ProfileOnboarding.tsx: Error updating profile during onboarding:', error);\n      toast.error(t('onboarding.saveFailed'));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const calculateCompleteness = () => {\n    let score = 20; // Base score for registration\n    if (data.bio.length > 50) score += 15;\n    if (data.location) score += 10;\n    if (data.skills.length >= 3) score += 20;\n    if (data.jobExperiences.length > 0) score += 15;\n    if (data.studyExperiences.length > 0) score += 10;\n    if (data.certifications.length > 0) score += 5; // New field\n    if (data.servicesOffered.length > 0) score += 5; // New field\n    if (data.bio.length > 100 && data.skills.length >= 5 && data.jobExperiences.length > 1 && data.studyExperiences.length > 0) score += 10; // Bonus for detailed profile\n    return Math.min(score, 100);\n  };\n\n  const renderStepContent = () => {\n    const step = steps[currentStep];\n    const Icon = step.icon;\n\n    switch (step.id) {\n      case 'welcome':\n        return (\n          <div className=\"space-y-6 text-center\">\n            <div className=\"bg-primary/10 w-20 h-20 rounded-full flex items-center justify-center mx-auto\">\n              <Icon className=\"h-10 w-10 text-primary\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl mb-2\">\n                {t('onboarding.welcome')}, {userName}! 👋\n              </h2>\n              <p className=\"text-muted-foreground\">\n                {t('onboarding.letsSetup')}\n              </p>\n            </div>\n            <Card className=\"bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800\">\n              <CardContent className=\"pt-6\">\n                <div className=\"space-y-3 text-sm\">\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"h-5 w-5 text-blue-600\" />\n                    <span>{t('onboarding.benefit1')}</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"h-5 w-5 text-blue-600\" />\n                    <span>{t('onboarding.benefit2')}</span>\n                  </div>\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"h-5 w-5 text-blue-600\" />\n                    <span>{t('onboarding.benefit3')}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        );\n\n      case 'bio':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto\">\n              <Icon className=\"h-8 w-8 text-primary\" />\n            </div>\n            <div className=\"space-y-4\">\n              <Label htmlFor=\"bio\">{t('onboarding.tellUs')}</Label>\n              <Textarea\n                id=\"bio\"\n                placeholder={t('onboarding.bioPlaceholder')}\n                value={data.bio}\n                onChange={(e) => setData({ ...data, bio: e.target.value })}\n                rows={5}\n                className=\"resize-none\"\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                {data.bio.length}/500 {t('onboarding.characters')}\n              </p>\n            </div>\n          </div>\n        );\n\n      case 'location':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto\">\n              <Icon className=\"h-8 w-8 text-primary\" />\n            </div>\n            <div className=\"space-y-4\">\n              <Label htmlFor=\"location\">{t('onboarding.whereLocated')}</Label>\n              <Input\n                id=\"location\"\n                placeholder={t('onboarding.locationPlaceholder')}\n                value={data.location}\n                onChange={(e) => setData({ ...data, location: e.target.value })}\n              />\n              <p className=\"text-xs text-muted-foreground\">\n                {t('onboarding.locationHelp')}\n              </p>\n            </div>\n          </div>\n        );\n\n      case 'skills':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto\">\n              <Icon className=\"h-8 w-8 text-primary\" />\n            </div>\n            <div className=\"space-y-4\">\n              <Label htmlFor=\"skills\">{t('onboarding.addSkills')}</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  id=\"skills\"\n                  placeholder={t('onboarding.skillsPlaceholder')}\n                  value={data.currentSkill}\n                  onChange={(e) => setData({ ...data, currentSkill: e.target.value })}\n                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddSkill())}\n                />\n                <Button \n                  type=\"button\" \n                  onClick={handleAddSkill}\n                  disabled={!data.currentSkill.trim() || data.skills.length >= 10}\n                >\n                  {t('common.add')}\n                </Button>\n              </div>\n              \n              {data.skills.length > 0 && (\n                <div className=\"flex flex-wrap gap-2 mt-3\">\n                  {data.skills.map((skill, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"gap-1\">\n                      {skill}\n                      <button\n                        onClick={() => handleRemoveSkill(index)}\n                        className=\"ml-1 hover:text-destructive\"\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </button>\n                    </Badge>\n                  ))}\n                </div>\n              )}\n              \n              <p className=\"text-xs text-muted-foreground\">\n                {data.skills.length}/10 {t('onboarding.skillsAdded')}\n              </p>\n            </div>\n          </div>\n        );\n\n      case 'jobExperience':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto\">\n              <Icon className=\"h-8 w-8 text-primary\" />\n            </div>\n            <div className=\"space-y-4\">\n              <Label>{t('onboarding.jobExperienceTitle')}</Label>\n              <p className=\"text-sm text-muted-foreground mb-4\">{t('onboarding.jobExperienceDescription')}</p>\n\n              {data.jobExperiences.map((exp, index) => (\n                <Card key={exp.id} className=\"mb-2\">\n                  <CardContent className=\"p-4 flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">{exp.title} at {exp.company}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {exp.startDate} - {exp.endDate || t('onboarding.current')}\n                      </p>\n                    </div>\n                    <Button variant=\"ghost\" size=\"sm\" onClick={() => handleRemoveJobExperience(exp.id)}>\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n\n              <Card className=\"p-4 space-y-3\">\n                <h4 className=\"font-semibold text-sm\">{t('onboarding.addJobExperience')}</h4>\n                <div>\n                  <Label htmlFor=\"job-title\">{t('onboarding.jobTitle')}</Label>\n                  <Input\n                    id=\"job-title\"\n                    placeholder={t('onboarding.jobTitlePlaceholder')}\n                    value={data.currentJobExperience.title}\n                    onChange={(e) => setData(prev => ({ ...prev, currentJobExperience: { ...prev.currentJobExperience, title: e.target.value } }))}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"company\">{t('onboarding.company')}</Label>\n                  <Input\n                    id=\"company\"\n                    placeholder={t('onboarding.companyPlaceholder')}\n                    value={data.currentJobExperience.company}\n                    onChange={(e) => setData(prev => ({ ...prev, currentJobExperience: { ...prev.currentJobExperience, company: e.target.value } }))}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"job-start-date\">{t('onboarding.startDate')}</Label>\n                    <Input\n                      id=\"job-start-date\"\n                      type=\"date\"\n                      value={data.currentJobExperience.startDate}\n                      onChange={(e) => setData(prev => ({ ...prev, currentJobExperience: { ...prev.currentJobExperience, startDate: e.target.value } }))}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"job-end-date\">{t('onboarding.endDate')} ({t('onboarding.optional')})</Label>\n                    <Input\n                      id=\"job-end-date\"\n                      type=\"date\"\n                      value={data.currentJobExperience.endDate || ''}\n                      onChange={(e) => setData(prev => ({ ...prev, currentJobExperience: { ...prev.currentJobExperience, endDate: e.target.value || null } }))}\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"job-description\">{t('onboarding.description')} ({t('onboarding.optional')})</Label>\n                  <Textarea\n                    id=\"job-description\"\n                    placeholder={t('onboarding.jobDescriptionPlaceholder')}\n                    value={data.currentJobExperience.description}\n                    onChange={(e) => setData(prev => ({ ...prev, currentJobExperience: { ...prev.currentJobExperience, description: e.target.value } }))}\n                    rows={3}\n                  />\n                </div>\n                <Button type=\"button\" onClick={handleAddJobExperience} className=\"w-full gap-2\">\n                  <Plus className=\"h-4 w-4\" /> {t('onboarding.addExperience')}\n                </Button>\n              </Card>\n            </div>\n          </div>\n        );\n\n      case 'studyExperience':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto\">\n              <Icon className=\"h-8 w-8 text-primary\" />\n            </div>\n            <div className=\"space-y-4\">\n              <Label>{t('onboarding.studyExperienceTitle')}</Label>\n              <p className=\"text-sm text-muted-foreground mb-4\">{t('onboarding.studyExperienceDescription')}</p>\n\n              {data.studyExperiences.map((exp, index) => (\n                <Card key={exp.id} className=\"mb-2\">\n                  <CardContent className=\"p-4 flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">{exp.degree} at {exp.institution}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {exp.startDate} - {exp.endDate || t('onboarding.current')}\n                      </p>\n                    </div>\n                    <Button variant=\"ghost\" size=\"sm\" onClick={() => handleRemoveStudyExperience(exp.id)}>\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n\n              <Card className=\"p-4 space-y-3\">\n                <h4 className=\"font-semibold text-sm\">{t('onboarding.addStudyExperience')}</h4>\n                <div>\n                  <Label htmlFor=\"degree\">{t('onboarding.degree')}</Label>\n                  <Input\n                    id=\"degree\"\n                    placeholder={t('onboarding.degreePlaceholder')}\n                    value={data.currentStudyExperience.degree}\n                    onChange={(e) => setData(prev => ({ ...prev, currentStudyExperience: { ...prev.currentStudyExperience, degree: e.target.value } }))}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"institution\">{t('onboarding.institution')}</Label>\n                  <Input\n                    id=\"institution\"\n                    placeholder={t('onboarding.institutionPlaceholder')}\n                    value={data.currentStudyExperience.institution}\n                    onChange={(e) => setData(prev => ({ ...prev, currentStudyExperience: { ...prev.currentStudyExperience, institution: e.target.value } }))}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"study-start-date\">{t('onboarding.startDate')}</Label>\n                    <Input\n                      id=\"study-start-date\"\n                      type=\"date\"\n                      value={data.currentStudyExperience.startDate}\n                      onChange={(e) => setData(prev => ({ ...prev, currentStudyExperience: { ...prev.currentStudyExperience, startDate: e.target.value } }))}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"study-end-date\">{t('onboarding.endDate')} ({t('onboarding.optional')})</Label>\n                    <Input\n                      id=\"study-end-date\"\n                      type=\"date\"\n                      value={data.currentStudyExperience.endDate || ''}\n                      onChange={(e) => setData(prev => ({ ...prev, currentStudyExperience: { ...prev.currentStudyExperience, endDate: e.target.value || null } }))}\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"study-description\">{t('onboarding.description')} ({t('onboarding.optional')})</Label>\n                  <Textarea\n                    id=\"study-description\"\n                    placeholder={t('onboarding.studyDescriptionPlaceholder')}\n                    value={data.currentStudyExperience.description}\n                    onChange={(e) => setData(prev => ({ ...prev, currentStudyExperience: { ...prev.currentStudyExperience, description: e.target.value } }))}\n                    rows={3}\n                  />\n                </div>\n                <Button type=\"button\" onClick={handleAddStudyExperience} className=\"w-full gap-2\">\n                  <Plus className=\"h-4 w-4\" /> {t('onboarding.addEducation')}\n                </Button>\n              </Card>\n            </div>\n          </div>\n        );\n\n      case 'certifications': // New step content\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto\">\n              <Icon className=\"h-8 w-8 text-primary\" />\n            </div>\n            <div className=\"space-y-4\">\n              <Label>{t('profile.certificationsTitle')}</Label>\n              <p className=\"text-sm text-muted-foreground mb-4\">{t('profile.certificationsDescription')}</p>\n\n              {data.certifications.map((cert) => (\n                <Card key={cert.id} className=\"mb-2\">\n                  <CardContent className=\"p-4 flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">{cert.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">{cert.issuer} • {cert.date}</p>\n                    </div>\n                    <Button variant=\"ghost\" size=\"sm\" onClick={() => handleRemoveCertification(cert.id)}>\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n\n              <Card className=\"p-4 space-y-3\">\n                <h4 className=\"font-semibold text-sm\">{t('profile.addCertification')}</h4>\n                <div>\n                  <Label htmlFor=\"cert-name\">{t('profile.certificationName')}</Label>\n                  <Input\n                    id=\"cert-name\"\n                    placeholder={t('profile.certificationNamePlaceholder')}\n                    value={data.currentCertification.name}\n                    onChange={(e) => setData(prev => ({ ...prev, currentCertification: { ...prev.currentCertification, name: e.target.value } }))}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"cert-issuer\">{t('profile.issuer')}</Label>\n                  <Input\n                    id=\"cert-issuer\"\n                    placeholder={t('profile.issuerPlaceholder')}\n                    value={data.currentCertification.issuer}\n                    onChange={(e) => setData(prev => ({ ...prev, currentCertification: { ...prev.currentCertification, issuer: e.target.value } }))}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"cert-date\">{t('profile.dateIssued')}</Label>\n                  <Input\n                    id=\"cert-date\"\n                    type=\"date\"\n                    value={data.currentCertification.date}\n                    onChange={(e) => setData(prev => ({ ...prev, currentCertification: { ...prev.currentCertification, date: e.target.value } }))}\n                  />\n                </div>\n                <Button type=\"button\" onClick={handleAddCertification} className=\"w-full gap-2\">\n                  <Plus className=\"h-4 w-4\" /> {t('profile.addCertification')}\n                </Button>\n              </Card>\n            </div>\n          </div>\n        );\n\n      case 'servicesOffered': // New step content\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto\">\n              <Icon className=\"h-8 w-8 text-primary\" />\n            </div>\n            <div className=\"space-y-4\">\n              <Label>{t('profile.servicesOfferedTitle')}</Label>\n              <p className=\"text-sm text-muted-foreground mb-4\">{t('profile.servicesOfferedDescription')}</p>\n\n              {data.servicesOffered.map((service) => (\n                <Card key={service.id} className=\"mb-2\">\n                  <CardContent className=\"p-4 flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium\">{service.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">{service.price}</p>\n                    </div>\n                    <Button variant=\"ghost\" size=\"sm\" onClick={() => handleRemoveService(service.id)}>\n                      <X className=\"h-4 w-4 text-destructive\" />\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n\n              <Card className=\"p-4 space-y-3\">\n                <h4 className=\"font-semibold text-sm\">{t('profile.addService')}</h4>\n                <div>\n                  <Label htmlFor=\"service-name\">{t('profile.serviceName')}</Label>\n                  <Input\n                    id=\"service-name\"\n                    placeholder={t('profile.serviceNamePlaceholder')}\n                    value={data.currentService.name}\n                    onChange={(e) => setData(prev => ({ ...prev, currentService: { ...prev.currentService, name: e.target.value } }))}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"service-price\">{t('profile.servicePrice')}</Label>\n                  <Input\n                    id=\"service-price\"\n                    placeholder={t('profile.servicePricePlaceholder')}\n                    value={data.currentService.price}\n                    onChange={(e) => setData(prev => ({ ...prev, currentService: { ...prev.currentService, price: e.target.value } }))}\n                  />\n                </div>\n                <Button type=\"button\" onClick={handleAddService} className=\"w-full gap-2\">\n                  <Plus className=\"h-4 w-4\" /> {t('profile.addService')}\n                </Button>\n              </Card>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 p-4\">\n      <Card className=\"w-full max-w-2xl shadow-xl\">\n        <CardHeader>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle>{steps[currentStep].title}</CardTitle>\n                <CardDescription>{steps[currentStep].description}</CardDescription>\n              </div>\n              <Button variant=\"ghost\" size=\"sm\" onClick={onSkip}>\n                {t('common.skip')}\n              </Button>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm text-muted-foreground\">\n                <span>{t('onboarding.step')} {currentStep + 1} {t('onboarding.of')} {steps.length}</span>\n                <span>{Math.round(progress)}% {t('onboarding.complete')}</span>\n              </div>\n              <Progress value={progress} className=\"h-2\" />\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {renderStepContent()}\n\n          <div className=\"flex justify-between pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={handleBack}\n              disabled={currentStep === 0}\n            >\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              {t('common.back')}\n            </Button>\n            \n            <Button\n              onClick={handleNext}\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <>\n                  <span className=\"mr-2\">{t('common.saving')}</span>\n                  <span className=\"animate-spin\">⏳</span>\n                </>\n              ) : currentStep === steps.length - 1 ? (\n                <>\n                  {t('common.finish')}\n                  <CheckCircle className=\"ml-2 h-4 w-4\" />\n                </>\n              ) : (\n                <>\n                  {t('common.next')}\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}"],"names":["ProfileOnboarding","userId","userName","userEmail","onComplete","onSkip","t","useI18n","setUser","useUser","currentStep","setCurrentStep","useState","isLoading","setIsLoading","data","setData","steps","Sparkles","User","MapPin","Star","Briefcase","GraduationCap","Award","DollarSign","progress","handleAddSkill","handleRemoveSkill","index","_","i","handleAddJobExperience","title","company","startDate","prev","toast","handleRemoveJobExperience","id","exp","handleAddStudyExperience","degree","institution","handleRemoveStudyExperience","handleAddCertification","name","issuer","date","handleRemoveCertification","cert","handleAddService","price","handleRemoveService","service","handleNext","handleComplete","handleBack","profileDataToSend","calculateCompleteness","updatedProfileResponse","userApi","error","score","renderStepContent","step","Icon","jsxs","jsx","Card","CardContent","CheckCircle","Label","Textarea","e","Input","Button","skill","Badge","X","Plus","CardHeader","CardTitle","CardDescription","Progress","ArrowLeft","Fragment","ArrowRight"],"mappings":"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"}